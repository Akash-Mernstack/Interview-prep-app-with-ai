### ðŸ‘· DEV STAGE ###
FROM node:22 AS dev

WORKDIR /app

# Copy package.json and install dependencies
COPY frontend/package*.json ./
RUN npm install

# Copy the rest of your frontend code
COPY frontend/ .

# Expose the development port
EXPOSE 5173

# Command to run the development server
CMD ["npm", "run", "dev"]


### ðŸš€ PROD STAGE ###
# 1. Build Stage (using a Node.js image to build the React app)
FROM node:22 AS build

WORKDIR /app

# Copy package.json and install dependencies (including devDependencies needed for build)
COPY frontend/package*.json ./
RUN npm install

# Copy the rest of your frontend code
COPY frontend/ .

# Run the build command (e.g., `npm run build` which usually calls `vite build` or `react-scripts build`)
# This will create static assets in a 'dist' or 'build' folder
RUN npm run build


# 2. Serve Stage (using a lightweight web server like Nginx to serve the static assets)
FROM nginx:alpine AS prod

# Copy the built static assets from the 'build' stage
COPY --from=build /app/dist /usr/share/nginx/html

# Copy your Nginx configuration (optional but recommended for production)
# If you have a custom Nginx config, create it at frontend/nginx.conf
# COPY frontend/nginx.conf /etc/nginx/conf.d/default.conf

# Expose the port Nginx will listen on (default for HTTP is 80)
EXPOSE 80

# Command to start Nginx in the foreground
CMD ["nginx", "-g", "daemon off;"]